{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BarWithWeight","props","availablePlates","smallestPlate","ar","smallest","i","length","smallestInArray","selectedPlates","weight","totalWeight","plate","push","react_default","a","createElement","className","reverse","map","key","App","_this","Object","classCallCheck","this","stages","reps","possibleConstructorReturn","getPrototypeOf","call","state","stage","restTime","warmups","howManyWarmups","resting","set","setState","percent","areWeDone","_this2","areWeStarted","headerText","react_countdown_clock_default","seconds","color","alpha","size","onComplete","nextStage","bind","instructions","stageDetails","type","value","onChange","target","onClick","rest","buttonText","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a4408df.chunk.js","sourcesContent":["import React from 'react';\nimport ReactCountdownClock from 'react-countdown-clock';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    let SETS = 3;\n    let REPS = 5;\n    let stages = [ { weight: 0, reps: 5 }, { weight: .6, reps: 5 }, { weight: .7, reps: 5 }, { weight: .8, reps: 1 } ];\n    this.state = {\n      totalWeight: 145,\n      stage: -1,\n      restTime: 2,\n      warmups: this.howManyWarmups(stages),\n      stages: stages,\n      resting: false\n    }\n    for (var set = 0; set < SETS; set++) {\n      this.state.stages.push({ weight: 1, reps: REPS});\n    }\n  }\n\n  howManyWarmups (stages) {\n    for (var i = 0; i < stages.length; i++) {\n      if (stages[i].weight == 1)\n        return i;\n    }\n    return stages.length;\n  }\n\n  nextStage() {\n    if (this.state.stage < this.state.stages.length - 1)\n      this.setState({ stage: this.state.stage + 1, resting: false });\n    else\n      this.setState({ stage: -1 });\n  }\n\n  rest() {\n    this.setState({ resting: true });\n  }\n\n  stageDetails() {\n    var weight = this.state.stages[this.state.stage].weight;\n    var reps = this.state.stages[this.state.stage].reps;\n    weight = weight > 0 ? weight * this.state.totalWeight : 45;\n    return { weight: weight, reps: reps};\n  }\n\n  instructions() {\n    var percent = this.state.stages[this.state.stage].weight;\n    var reps = this.state.stages[this.state.stage].reps;\n    var english = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\", \"eleven\", \"twelve\", \"thirteen\", \"fourteen\", \"fourteen\", \"fifteen\", \"sixteen\", \"seventeen\", \"eighteen\", \"nineteen\", \"twenty\"];\n    var weightInstruct, repInstruct;\n    if (percent == 0)\n      weightInstruct = \"with an empty bar\";\n    else if (percent == 1)\n      weightInstruct = \"with full weight\";\n    else\n      weightInstruct = \"with \" + (percent * 100) + \" percent weight\";\n\n    repInstruct = english[reps-1] + (reps == 1 ? \" rep\" : \" reps\");\n\n    return repInstruct + \" \" + weightInstruct;\n  }\n\n  buttonText() {\n    var stage = this.state.stage;\n    if (stage == -1)\n      return \"Start Warmup\";\n    else if (stage == this.state.warmups - 1)\n      return \"Start First Set\";\n    else if (stage < this.state.warmups - 1)\n      return \"Next Warmup Set\";\n    else if (stage < this.state.stages.length - 1)\n      return \"Next Set\";\n    else\n      return \"Done\";\n  }\n\n  headerText() {\n    var english = [\"first\", \"second\", \"third\", \"4th\", \"5th\", \"6th\", \"7th\", \"8th\", \"9th\"];\n    var stage = this.state.stage;\n    if (this.state.resting)\n      return \"Rest\";\n    if (stage == -1)\n      return \"Warmup\";\n    else if (stage == this.state.warmups)\n      return \"First Set\";\n    else if (stage < this.state.warmups)\n      return \"Warmup\";\n    else if (this.areWeDone())\n      return \"Last Set\";\n    else\n      return english[stage - this.state.warmups] + \" Set\";\n  }\n\n  areWeDone() {\n    return this.state.stage == this.state.stages.length - 1;\n  }\n  \n  areWeStarted() {\n    return this.state.stage > -1;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-container\">\n\t  {this.areWeStarted() ?\n\t    <div>\n\t      <h1>{this.headerText()}</h1>\n\t      { this.state.resting ? \n\t        <div>\n\t        <ReactCountdownClock seconds={this.state.restTime}\n                       color=\"#fff\"\n                       alpha={0.9}\n                       size={300}\n                       onComplete={this.nextStage.bind(this)} />\n\t        </div>\n\t        :\n\t        <div>\n\t          {this.instructions()}\n                  <BarWithWeight totalWeight={this.stageDetails().weight} />\n\t        </div>\n\t      }\n\t    </div>\n\t  :\n\t    <div>\n\t      <div className=\"field\">\n              <input type=\"text\"\n\t             value={this.state.totalWeight}\n\t             onChange={ (a)=>this.setState({ totalWeight: a.target.value }) } />\n              <span className=\"lbs\"> lbs</span>\n\t      </div>\n\t      <div className=\"field\">\n              <input type=\"text\"\n\t             value={this.state.restTime}\n\t             onChange={ (a)=>this.setState({ restTime: a.target.value }) } />\n              <span className=\"lbs\"> second rest</span>\n\t      </div>\n            </div>\n\t  }\n\t  {!this.state.resting ? <button onClick={ this.state.stage == -1 || this.areWeDone() ? this.nextStage.bind(this) : this.rest.bind(this) }>{this.buttonText()}</button> : \"\" }\n        </header>\n      </div>\n    );\n  }\n}\n\nfunction BarWithWeight(props) {\n  var barWeight = 45;\n  var availablePlates = [ 45, 25, 10, 5, 2.5 ];\n  var smallestPlate = smallestInArray(availablePlates); \n  var selectedPlates = [];\n  var weight = props.totalWeight - barWeight;\n\n  var i = 0;\n  while (weight >= smallestPlate * 2) {\n    var plate = availablePlates[i];\n    if (weight >= plate * 2) {\n      selectedPlates.push(plate);\n      weight -= plate * 2;\n    } else {\n      i++;\n    }\n  }\n\n  return (\n    <div className=\"weighted-bar\">\n      <div className=\"bar\"></div>\n      {selectedPlates.reverse().map((plate,i) => { return <div className=\"plate\" weight={plate} key={\"left\" + i}>{plate}</div>})}\n      <div className=\"gap\"></div>\n      {selectedPlates.reverse().map((plate,i) => { return <div className=\"plate\" weight={plate} key={\"right\" + i}>{plate}</div>})}\n    </div>\n  );\n}\n\nfunction smallestInArray(ar) {\n  var smallest = ar[0];\n  for (var i = 1; i < ar.length; i++) \n    if (ar[i] < smallest)\n      smallest = ar[i];\n  return smallest;\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}